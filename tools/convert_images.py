#!/usr/bin/env python3
# Mostly generated by llama3

import sys
import os
import re
import hashlib
import unicodedata
import PIL.Image
import concurrent.futures

# Set the output directory
OUTPUT_DIR = "output"

def to_ascii(input_string):
    # https://stackoverflow.com/questions/517923/what-is-the-best-way-to-remove-accents-normalize-in-a-python-unicode-string#2633310
    normalized_string = ''.join(c for c in unicodedata.normalize('NFD', input_string)
                                if unicodedata.category(c) != 'Mn')
    # Replace spaces with underscores and special characters with their ASCII equivalents
    ascii_string = re.sub(r'[^A-Za-z0-9_.]', '_', normalized_string)
    return ascii_string.lower()

def build_inventory(dirpath):
    # Iterate through all files in the images root
    inventory = {}
    for root, dirs, files in os.walk(dirpath):
        for filename in files:
            filepath= os.path.join(root, filename)
            with open(filepath, mode='rb') as fd:
                data = fd.read()
                sha = hashlib.sha1(data).hexdigest()
                inventory[sha] = filepath
    return inventory

def target_filename(sha, filepath):
    basename, ext = os.path.splitext(os.path.basename(filepath))
    return f"{to_ascii(basename)}-{sha[:8]}.png"

def to_1080p(img):
            width, height = img.size
            new_height = 1080
            new_width = round(width * new_height/height)
            return img.resize((new_width, new_height))

def process_item(item):
    sha, filepath = item
    print(f"Processing {filepath}")
    try:
        img = to_1080p(PIL.Image.open(filepath))
        outname = target_filename(sha, filepath)
        outpath = os.path.join(OUTPUT_DIR, outname)
        img.save(outpath)
    except PIL.UnidentifiedImageError:
        pass
        
def main():
    # Create the output directory if it doesn't exist
    if not os.path.exists(OUTPUT_DIR):
        os.makedirs(OUTPUT_DIR)

    inventory = build_inventory(sys.argv[1])
    with concurrent.futures.ProcessPoolExecutor(max_workers=12) as executor:
        executor.map(process_item, inventory.items())

if __name__ == "__main__":
    main()
